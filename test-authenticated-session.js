const { Client, LocalAuth } = require('whatsapp-web.js');
const path = require('path');

console.log('üß™ Testing Authenticated WhatsApp Session...');
console.log('üìÅ Using session from:', path.join(__dirname, '.wwebjs_auth'));

// Create client using the existing authenticated session
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: 'watify-client',
        dataPath: path.join(__dirname, '.wwebjs_auth')
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu'
        ]
    }
});

let isReady = false;

// Ready event
client.on('ready', async () => {
    console.log('\n‚úÖ WhatsApp client is ready using authenticated session!');
    
    try {
        console.log('\nüìû Client Info:');
        console.log(`üì± Phone: ${client.info.wid.user}`);
        console.log(`üë§ Name: ${client.info.pushname}`);
        console.log(`üîã Battery: ${client.info.battery}%`);
        
        isReady = true;
        
        console.log('\nüß™ Testing message sending to yourself...');
        const yourNumber = client.info.wid.user;
        const testMessage = `‚úÖ Message sending test successful! 
Time: ${new Date().toLocaleString()}
From: Watify Application`;
        
        console.log(`üì§ Sending test message to: ${yourNumber}`);
        const result = await client.sendMessage(yourNumber + '@c.us', testMessage);
        
        console.log('\nüéâ SUCCESS! Message sent successfully!');
        console.log(`üìß Message ID: ${result.id._serialized}`);
        console.log(`üìß Acknowledgment: ${result.ack}`);
        
        console.log('\n‚úÖ Your WhatsApp authentication is working perfectly!');
        console.log('üåü Check your WhatsApp - you should see the test message.');
        console.log('\nNow the issue is that your main backend server needs to use this session...');
        
        // Keep running to receive messages
        console.log('\n‚è≥ Keeping client alive to test message receiving...');
        console.log('üí¨ Send a message to this WhatsApp number to test receiving.');
        
    } catch (error) {
        console.error('‚ùå Error testing message:', error);
    }
});

// QR Code event (shouldn't happen with authenticated session)
client.on('qr', (qr) => {
    console.log('‚ö†Ô∏è QR code generated - this means the session expired');
    console.log('Please scan the QR code again to re-authenticate');
});

// Authentication events
client.on('authenticated', () => {
    console.log('üîê Using existing authentication session');
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå Authentication failed:', msg);
    console.log('üí° The session may have expired. Please run the authentication process again.');
});

// Message received
client.on('message', (message) => {
    if (!message.fromMe) {
        console.log(`\nüì© Received message: "${message.body}"`);
        console.log(`üìß From: ${message.from}`);
        console.log(`‚è∞ Time: ${new Date(message.timestamp * 1000).toLocaleString()}`);
    }
});

// Error handling
client.on('error', (error) => {
    console.error('‚ùå WhatsApp error:', error);
});

// Disconnected
client.on('disconnected', (reason) => {
    console.log('üîå WhatsApp disconnected:', reason);
});

// Start the client
console.log('üîÑ Initializing WhatsApp client with authenticated session...');
client.initialize();

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë Shutting down...');
    console.log('‚úÖ Authentication test complete!');
    client.destroy();
    process.exit(0);
});

// Auto shutdown after 2 minutes if successful
setTimeout(() => {
    if (isReady) {
        console.log('\n‚è∞ Auto-shutting down after successful test...');
        console.log('‚úÖ Your WhatsApp session is working perfectly!');
        client.destroy();
        process.exit(0);
    }
}, 120000); 